{
  "hash": "0793f3b8d4b5b4c2259dd10d048b657d",
  "result": {
    "engine": "knitr",
    "markdown": "# Eerste berekeningen in R\n\nMisschien herinner je je nog dat in het begin van dit leerpad werd gezegd dat R dient om allerlei berekeningen te maken. Eindelijk zijn we zover om dit voor het eerst te demonstreren!\n\n\\\n\n## Bewerkingen met getallen\n\nR kan je onder meer gebruiken voor eenvoudige wiskundige bewerkingen. Bekijk de video voor een demonstratie. Onder de video vind je de bijhorende uitleg in tekstvorm.\n\n\\\n\n<iframe src=\"https://ugent.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=c0253b4a-b42d-4ab4-9295-b1a0009032f8&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\" height=\"315\" width=\"560\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto ingesloten videospeler\" aria-description=\"Video wiskundige basisbewerkingen\" ></iframe>\n\n\\\n\nR is een programmeertaal. Dat betekent dat het een taal is waarmee je instructies geeft aan je computer.\n\nNiet alle instructies geven het gewenste resultaat. R kan geen boterhammen voor je smeren of je kot opkuisen, dus het heeft weinig zin om dat te vragen aan R.\n\nWat kan je dan wel met R? R is een hulpmiddel dat je helpt om onderzoeksvragen te beantwoorden. En dus bevat R allerlei mogelijkheden (echt serieus, héél veel mogelijkheden!) om berekeningen te maken die daarbij helpen.\n\nEen aantal van de commando's om zulke berekeningen te maken zal je leren kennen in de loop van je vakken. Voor deze introductie beginnen we bij het begin: eenvoudige wiskundige bewerkingen als optellen en aftrekken, vermenigvuldigen en delen. Er wordt soms gezegd dat R een veredelde rekenmachine is. En inderdaad, je kan R gebruiken als een gewone rekenmachine.\n\nTip: probeer de commando's die je op deze pagina tegenkomt ook zelf eens uit in RStudio. Dat is belangrijk om het allemaal wat in de vingers te krijgen.\n\n\\\n\n### Getallen\n\nJe kan getallen optellen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4+3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\\\n\nHet maakt voor R trouwens niet uit of je spaties tussen de tekens zet. Om de leesbaarheid van je code te verbeteren is het wel een goed idee om regelmatig spaties te gebruiken.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4 + 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4           +             3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\nJe kan een getal van een ander getal aftrekken.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5-2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\\\n \n\nTwee getallen vermenigvuldigen kan ook. Je gebruikt daarvoor een asterisk `*`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n6*3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18\n```\n\n\n:::\n:::\n\n\n\n\\\n\nJe voelt het al komen: je kan ook een getal delen door een ander getal. Merk op dat de output \"1 komma 5\" geschreven wordt met een punt, dus niet \"1,5\". Ook als je zelf commando's schrijft, moet je een punt gebruiken om kommagetallen te typen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n12/8\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5\n```\n\n\n:::\n:::\n\n\n\\\n\nEn ook getallen tot een macht verheffen kan natuurlijk. 2 tot de 5e macht verheffen doe je zo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2^5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n:::\n\n\n\\\n\nDeze bewerkingen kan je combineren, eventueel ook met haakjes erbij. De gebruikelijke volgorde van bewerkingen is hier van toepassing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 / 6 - 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -5.333333\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 / (6 - 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -10\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(11 - 4) * 4 / 2 + (1 / 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14.33333\n```\n\n\n:::\n:::\n\n\n\n\\\n\n### Objecten\n\nAl onder de indruk van de kracht van R? Waarschijnlijk niet. Dat was natuurlijk nog heel basic. Wat kan er verder nog? Het is ook mogelijk om te rekenen met objecten die getallen bevatten, bijvoorbeeld zo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetal1 <- 8\ngetal2 <- 10\n```\n:::\n\n\n\\\n\nHet object `getal1` bevat de waarde 8 terwijl object `getal2` de waarde 10 bevat. Net als voorheen kan je wiskundige bewerkingen uitvoeren, maar nu door de objectnamen te gebruiken in plaats van de getallen zelf.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetal1 + getal2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(getal2 / getal1) - getal1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -6.75\n```\n\n\n:::\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n20 - getal1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n\\\n\n<div class=\"banner center\">\n<p style=\"font-size:24px; font-weight:bold\">That's it?</p>\n\nAllemaal goed en wel, maar tot hier toe heb je nog geen duidelijk antwoord op de vraag waarom R handiger is dan een gewone rekenmachine. Zo meteen zal dat duidelijker beginnen worden.\n\n</div>\n\n\\\n\n\n## Bewerkingen met vectoren\n\nBekijk het filmpje om te zien hoe je wiskundige bewerkingen kan uitvoeren met vectoren in R. Onder de video vind je de bijhorende uitleg in tekstvorm.\n\n\\\n\n<iframe src=\"https://ugent.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=c06f9769-a59e-4c1e-aff5-b1a00090332b&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\" height=\"315\" width=\"560\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto ingesloten videospeler\" aria-description=\"Video bewerkingen met vectoren\" ></iframe>\n\n\\\n\nIn R kan je rekenen met ganse vectoren. Nu zal je pas voor het eerst beginnen merken hoe handig R eigenlijk is.\n\n\\\n\n### Voorbeeld 1\n\nBijvoorbeeld, je wil de evolutie van het gewicht van baby's onderzoeken.\n\nJe weegt baby's bij de geboorte. Die gegevens (in kilogram) sla je op in een vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngewicht_geboorte <- c(3.411, 2.965, 3.215, 3.009, 3.228)\n```\n:::\n\n\n\n\\\n \nVervolgens meet je dezelfde baby's opnieuw, 6 maanden na de geboorte. Ook deze gegevens sla je – in dezelfde volgorde! – op in een vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngewicht_6mnd <- c(5.033, 5.011, 5.501, 5.120, 4.963)\n```\n:::\n\n\n\n\\\n\nEen logische vraag zou nu kunnen zijn hoeveel elke baby is bijgekomen 6 maanden na de geboorte. Je zou natuurlijk telkens de waarden voor het gewicht van de individuele baby's kunnen aftrekken:\n\n$5.033 - 3.411$ voor de eerste baby,\n\n$5.011 - 2.965$ voor de tweede baby, \n\nenzovoort voor de andere baby's.\n\nDat is natuurlijk heel tijdrovend en je loopt bovendien het risico dat je fouten maakt. Voor een vijftal baby's valt het nog mee, maar in echt onderzoek zal je vaak veel meer dan 5 metingen uitvoeren.\n\nIn R hoef je gelukkig niet zoveel werk te doen. In plaats daarvan kan je eenvoudigweg de twee vectoren van elkaar aftrekken. Dit verschil steek je in een nieuw object, bijvoorbeeld met de naam `gewicht_evolutie`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngewicht_evolutie <- gewicht_6mnd - gewicht_geboorte\n```\n:::\n\n\n\n\\\n \nWanneer je dit nieuwe object oproept, zie je een vector die het verschil in gewicht bevat van elke baby tussen de geboorte en 6 maanden na de geboorte. Veel eenvoudiger, niet?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngewicht_evolutie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.622 2.046 2.286 2.111 1.735\n```\n\n\n:::\n:::\n\n\n\n\\\n\nR is dan wel een \"soort rekenmachine\", dit voorbeeld demonstreert voor het eerst dat R toch een pak meer kan dan de doorsnee rekenmachine op je smartphone.\n\n\n### Voorbeeld 2\n\nLaten we nog een tweede voorbeeld bekijken van een berekening met vectoren: Je kan een vector vermenigvuldigen met een getal. Dit kan bijvoorbeeld handig zijn om de gegevens te veranderen van eenheid. Bijvoorbeeld, je beschikt over gegevens in meter, maar je wil die liever in centimeter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_meter <- c(1.55, 1.79, 1.99, 1.91, 1.65, 1.81, 1.49, 1.74, 1.79)\n```\n:::\n\n\n\n\\\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_centimeter <- 100 * data_meter\n\ndata_centimeter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 155 179 199 191 165 181 149 174 179\n```\n\n\n:::\n:::\n\n\n\n\\\n\nNatuurlijk kan je ook vectoren optellen, vermenigvuldigen, delen,...\n\n\\\n\n\n\\",
    "supporting": [
      "06-Eerste-berekeningen-in-R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}