[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introductie R",
    "section": "",
    "text": "Gebruiksaanwijzing\nLaten we eerst eens demonstreren hoe de rest van dit leerpad eruit ziet. Je zal snel merken dat de pagina’s een speciale layout hebben met veel kleuren en kaders. Die layout is niet willekeurig, maar dient om alles overzichtelijker te maken.\nHet belangrijkste dat je zal zien is een onderscheid tussen R-code en R-output. In R zal je voortdurend instructies geven aan je computer om berekeningen te maken. Die instructies zal je geven in de vorm van code. Je computer gaat aan de slag met die instructies en geeft je het resultaat. Dat is de output.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welkom!</span>"
    ]
  },
  {
    "objectID": "index.html#gebruiksaanwijzing",
    "href": "index.html#gebruiksaanwijzing",
    "title": "Introductie R",
    "section": "",
    "text": "R-code\nR-code vind je terug in een lichtblauw kader. Deze kaders bevatten instructies die je kan kopiëren met het icoontje dat rechts in de lichtblauwe balk verschijnt wanneer je erover zweeft met je muis. Vervolgens kan je die code plakken in een R-script (later meer over “scripts”) en uitvoeren. Maak je vooral nog geen zorgen om wat de onderstaande code precies betekent!\n\nhead(mtcars)\n\n\n\nMet een #-symbool is het mogelijk om R-code van wat commentaar te voorzien. Alle woorden, cijfers en symbolen die na het #-symbool staan worden genegeerd door R. Zulke commentaar zullen we op deze site gebruiken om kort toe te lichten wat we proberen te bereiken met een bepaald stukje code. (Het is trouwens een uitstekend idee om dat ook in je eigen code regelmatig te doen!)\n\nhead(mtcars) # we willen de eerste 6 rijen van de dataset 'mtcars' zien\n\n\n\nSoms vind je korte stukjes R-code ook middenin een stuk tekst. Die code zie je tegen een lichtgrijze achtergrond en in een ander lettertype, zoals mean(mtcars$mpg).\n\n\n\n\nR-output\nDe output (zeg maar: het resultaat) van de code verschijnt in de console van RStudio (later meer daarover). Zulke output wordt op deze site altijd tegen een oranje achtergrond getoond. Je ziet ook een [1] staan. Dit getal tussen vierkante haakjes geeft gewoon aan dat hier het eerste element van de output staat.\n\n\n[1] 21.0 21.0 22.8 21.4 18.7 18.1\n\n\n\n\nVaak zal je de code en de bijhorende output meteen onder elkaar zien. De code in het blauwe kader hieronder levert je de output in het oranje kader op.\n\nhead(mtcars$mpg) # toon de eerste 6 elementen van de variabele genaamd 'mpg' uit de dataset 'mtcars'\n\n[1] 21.0 21.0 22.8 21.4 18.7 18.1\n\n\n\n\n\n\nNavigeren\nAan de linkerkant vind je een inhoudstafel van het volledige leerpad. Je kan een onderdeel laden door op de titel te klikken.\nHet zoekveld net boven de inhoudstafel kan je gebruiken om snel terug te vinden waar een bepaald onderwerp wordt besproken.\nAan de rechterkant zie je een korte inhoud van wat er allemaal te vinden is in het onderdeel dat momenteel open staat. Ook hier kan je op een titel klikken om snel naar dat deeltje te gaan.\nHelemaal onderaan vind je ten slotte pijlen waarmee je naar het vorige of volgende onderdeel kan navigeren.\n\n\n\n\nAndere onderdelen\n\nLinks\nHier en daar staat een externe link naar een andere website. Dergelijke links zijn in blauwe letters aangeduid, zoals deze link naar de UGent-website. Links openen vanzelf in een nieuw tabblad.\n\n\n\n\nVraag en antwoord\nIn de loop van de tekst stellen we je af en toe een vraag die je kan gebruiken als zelftest (en om wakker te blijven). Om het antwoord te weten klik je op de knop zoals hieronder. Er klapt dan een extra stukje open met het antwoord en eventueel wat uitleg.\n\n\nKlik hier om het antwoord te zien\n\n\nHet antwoord.\n\n\n\n\n\n\nVoetnoten\nOp sommige plaatsen is het nodig om wat uitleg apart te plaatsen, in een voetnoot. Dit wordt aangeduid zoals bij het getalletje op het einde van deze zin1. Klikken op dat getalletje brengt je naar de voetnoot onderaan de pagina.\n\n\n\n\nSamenvatting\nHelemaal onderaan sommige pagina’s vind je een groen kader. Daarin vind je een mini-samenvatting van de pagina of soms een voorbeschouwing op de volgende pagina waarin er zal worden voortgebouwd op wat je al hebt geleerd.\n\n\nSamenvatting…\n\n\n… of soms een “brug” naar de volgende pagina.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welkom!</span>"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Introductie R",
    "section": "",
    "text": "Voetnoot. Klik op de pijl op het einde om terug te keren. ↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welkom!</span>"
    ]
  },
  {
    "objectID": "02-Wat-is-R.html",
    "href": "02-Wat-is-R.html",
    "title": "2  Wat is R?",
    "section": "",
    "text": "2.1 R is een hulpmiddel bij onderzoek\nDe vraag die je je waarschijnlijk al sinds het begin van je opleiding stelt is: “zijn studenten van de Faculteit Psychologie & Pedagogische Wetenschappen (FPPW) slimmer dan andere studenten?”\nNieuwsgierige wetenschapper die je bent, beslis je om een antwoord op die vraag te zoeken. Hoe pak je dat aan?\nEen goed begin zou zijn om data te verzamelen. Je laat bijvoorbeeld enkele honderden FPPW’ers en enkele honderden andere studenten een intelligentietest afleggen. Dat levert je een reeks scores op.\nWat nu? Staren naar de tabellen met data zal je niet veel dichter bij een antwoord brengen. Je zal iets moeten doen met de data.\nEen logische werkwijze zou kunnen zijn:\nDe drie stappen hierboven houden allemaal in dat je berekeningen zal moeten uitvoeren met je data. Dat kan je in principe met een doorsnee rekenmachine, maar je zal snel merken dat je op die manier wel extreem veel werk zal hebben en dat de kans op fouten ook erg groot is.\nR dient om dat soort berekeningen makkelijker te maken. Je kan R beschouwen als een soort rekenmachine die specifiek is ontworpen voor onderzoekers die dingen willen berekenen zoals in de drie stappen hierboven. Met R kan dat snel, makkelijk en foutloos.\nHoe je zulke berekeningen kan uitvoeren in R? In het volgende stukje wordt een eerste tip van de sluier gelicht.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wat is R?</span>"
    ]
  },
  {
    "objectID": "02-Wat-is-R.html#r-is-een-hulpmiddel-bij-onderzoek",
    "href": "02-Wat-is-R.html#r-is-een-hulpmiddel-bij-onderzoek",
    "title": "2  Wat is R?",
    "section": "",
    "text": "de gemiddelde score berekenen van de FPPW’ers enerzijds en van de andere studenten anderzijds\n\nhet verschil tussen die gemiddeldes berekenen\n\nuitzoeken of het verschil tussen de gemiddeldes betekent dat je kan concluderen dat FPPW’ers inderdaad slimmer zijn dan andere studenten",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wat is R?</span>"
    ]
  },
  {
    "objectID": "02-Wat-is-R.html#r-is-een-programmeertaal",
    "href": "02-Wat-is-R.html#r-is-een-programmeertaal",
    "title": "2  Wat is R?",
    "section": "2.2 R is een programmeertaal",
    "text": "2.2 R is een programmeertaal\nIn veel wetenschappelijk onderzoek moet je dus berekeningen uitvoeren met data. R is speciaal ontworpen met dat doel voor ogen.\nDe manier waarop je dat doet in R is door instructies (of “commando’s”) te typen, die je computer opdragen om iets met de data te doen. Om ervoor te zorgen dat je computer doet wat jij wil, moet je die instructies geven in een taal die de computer kan begrijpen: de programmeertaal R.\nIn het voorbeeld van daarnet wilde je drie berekeningen laten uitvoeren.\n\n\nde gemiddelde intelligentiescore berekenen van de FPPW’ers enerzijds en van de andere studenten anderzijds\n\nhet verschil tussen die gemiddeldes berekenen\n\nuitzoeken of het verschil tussen de gemiddeldes betekent dat je kan concluderen dat FPPW’ers inderdaad slimmer zijn dan andere studenten\n\n\n\nElk van die drie berekeningen kan je laten doen door een stukje “code”, dat wil zeggen een zinnetje in de programmeertaal R.\nWe zullen je hier nog niet meteen overdonderen met allerlei R-code. Dat zal je later wel nog genoeg leren. Maar om het toch een beetje concreet te maken: als de intelligentiescores van de FPPW-studenten in het object scores_fppw zitten, dan kan je het gemiddelde berekenen met de volgende code:\n\nmean(scores_fppw)\n\n\n\nZo makkelijk kan het zijn!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wat is R?</span>"
    ]
  },
  {
    "objectID": "02-Wat-is-R.html#rstudio",
    "href": "02-Wat-is-R.html#rstudio",
    "title": "2  Wat is R?",
    "section": "2.3 “RStudio”?",
    "text": "2.3 “RStudio”?\nR kan je vergelijken met een motor met wielen eronder: het is in essentie het enige wat je nodig hebt om van punt A naar punt B te raken. Het is “bruikbaar”.\n“Bruikbaar” is nog niet hetzelfde als “gebruiksvriendelijk”. Je reis van punt A naar punt B zal geen gezellig ritje zijn als je enkel over een motor met wielen beschikt.\nDat is waarom je RStudio zal gebruiken. Het is een computerprogramma dat het werken met R een stuk makkelijker en aangenamer maakt. Het maakt het bijvoorbeeld makkelijker om overzicht te houden over je code en om stukken code op te slaan zodat je er later verder aan kan werken.\n\n\nR en RStudio zal je afzonderlijk moeten downloaden en installeren op je computer. Hoe je dat kan doen leer je in het volgende hoofdstuk.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wat is R?</span>"
    ]
  },
  {
    "objectID": "03-R-en-RStudio-installeren.html",
    "href": "03-R-en-RStudio-installeren.html",
    "title": "3  R en RStudio installeren",
    "section": "",
    "text": "3.1 Windows",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R en RStudio installeren</span>"
    ]
  },
  {
    "objectID": "03-R-en-RStudio-installeren.html#windows",
    "href": "03-R-en-RStudio-installeren.html#windows",
    "title": "3  R en RStudio installeren",
    "section": "",
    "text": "3.1.1 R installeren voor Windows\nIn het filmpje hieronder wordt voorgetoond hoe je R kan downloaden en installeren voor Windows. De verschillende stappen die je moet doorlopen zijn:\n\n\nSurf naar de website www.r-project.org\n\nKlik door naar de pagina “Download”\n\nKies een mirror, bij voorkeur uit België (tenzij je je in een ander land bevindt)\n\nKlik op de link “Download R for Windows”\n\nKlik op “base”\n\nKlik op de link “Download R 4.0.3 for Windows”. De cijfers kunnen verschillend zijn, afhankelijk van wat de laatste nieuwe versie is.\n\n\n\n\n\n\n\nR is nu een programma op je computer dat je kan openen. Op de afbeelding hieronder zie je hoe dat eruit ziet: héél basic en ouderwets. Het lijkt niets meer dan een paar regeltjes tekst onder elkaar waar je ook zelf wat in kan typen. In principe zou je hiermee aan de slag kunnen gaan, maar dit is toch vooral iets voor de liefhebbers van extreme soberheid.\n\n\n\n\n\nR is niet ontworpen als een gebruiksvriendelijk “product”. Om het werken met R aangenamer én efficiënter te maken, zal je RStudio gebruiken. Zo meteen kom je te weten hoe je RStudio kan downloaden en installeren.\n\n\n\n\n\n\n3.1.2 RStudio installeren voor Windows\nR kan je zien als een motor met wielen eronder. Het is genoeg om je van punt A naar punt B te brengen. Maar met een motor alleen ben je niet zo veel. Je hebt ook de rest van de auto nodig om comfortabel te kunnen reizen. Dat is ongeveer wat RStudio doet: het maakt werken met R vlot, comfortabel en gebruiksvriendelijk.\nIn het filmpje verderop zie je hoe je het programma “RStudio” kan downloaden. De stappen die je moet doorlopen zijn:\n\n\nZoek via Google naar “download RStudio”.\n\nHet eerste zoekresultaat, van de website rstudio.com, is meteen de juiste link.\n\nKies voor de gratis versie en klik op “Download”.\n\nOp deze pagina zie je opnieuw een downloadknop. Daarmee start je het installatieproces.\n\nJe zal enkele keren op “Ok” en “Volgende” moeten klikken en ten slotte op “Voltooien”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R en RStudio installeren</span>"
    ]
  },
  {
    "objectID": "03-R-en-RStudio-installeren.html#macos",
    "href": "03-R-en-RStudio-installeren.html#macos",
    "title": "3  R en RStudio installeren",
    "section": "3.2 macOS",
    "text": "3.2 macOS\n\n3.2.1 R installeren voor macOS\nIn de video hieronder tot minuut 2:09 kan je zien hoe het installeren van R verloopt op een computer met het besturingssysteem macOS. Alle laptops en vaste PC’s van het merk Apple gebruiken dit besturingssysteem.\nDe stappen die je zal moeten doorlopen zijn:\n\n\nSurf naar de website www.r-project.org\n\nKlik door naar de pagina “Download”\n\nKies een mirror, bij voorkeur uit België (tenzij je je in een ander land bevindt)\n\nKlik op de link “Download R for (Mac) OS X”\n\nKlik op de link die eindigt op “.pkg” en sla het bestand op  \n\nOpen het bestand dat je net hebt opgeslagen en doorloop het installatieproces.\n\n\n\n\n\n\n\nIn de video vanaf minuut 1:54 zag je al heel kort hoe R eruit ziet: héél erg basic en ouderwets. Het lijkt niets meer dan een paar regeltjes tekst onder elkaar waar je ook zelf wat in kan typen. In principe zou je hiermee aan de slag kunnen gaan, maar dit is toch vooral iets voor de liefhebbers van extreme soberheid.\nR is niet ontworpen als een gebruiksvriendelijk “product”. Om de ervaring van het werken met R aangenamer én efficiënter te maken, zal je RStudio gebruiken. Zo meteen leer je hoe je RStudio kan downloaden en installeren.\n\n\n\n\n3.2.2 RStudio installeren voor macOS\nIn de video hieronder (van minuut 2:09 tot 3:53) zie je hoe de installatie van RStudio verloopt op een computer met het besturingssysteem macOS. De verschillende stappen die je moet doorlopen zijn:\n\n\nZoek de woorden “download RStudio” via Google\n\nDe eerste link in de lijst zou meteen de juiste moeten zijn. Deze link brengt je naar de website rstudio.com\n\nScroll een beetje naar beneden en kies RStudio Desktop Free. Klik op de blauwe downloadknop.\n\nKlik op de downloadknop met de tekst “Download RStudio for Mac”.\n\nOpen het bestand dat je net hebt gedownload en doorloop het installatieproces op je computer.\n\n\n\n\n\n\n\n\n\n\nKlaar voor gebruik!\n\n\nMooi zo! RStudio is nu een programma op je computer dat je kan openen, net zoals alle andere programma’s, zoals Word of Powerpoint. Telkens als je met R wil werken zal je nu RStudio openen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R en RStudio installeren</span>"
    ]
  },
  {
    "objectID": "03-R-en-RStudio-installeren.html#versies-van-r",
    "href": "03-R-en-RStudio-installeren.html#versies-van-r",
    "title": "3  R en RStudio installeren",
    "section": "3.3 Versies van R",
    "text": "3.3 Versies van R\nR is software die voortdurend evolueert. Regelmatig wordt een nieuwe versie uitgebracht. Soms zijn er belangrijke verschillen tussen de versies, waardoor het belangrijk is om te weten in welke versie je aan het werken bent.\nJe kan aflezen welke versie van R je gebruikt bij het opstarten van RStudio. In de console zie je een versienummer. In de afbeelding hieronder is het versie 4.0.4.\n\n\n\n\n\nJe kan de versie ook te weten komen door het commando version uit te voeren. Bijna helemaal onderaan vind je vervolgens de huidige versie.\n\n\n\n\n\nIs je versie van R verouderd? Je kan altijd de nieuwe versie downloaden van de website (www.r-project.org). De installatie gebeurt net zoals beschreven staat eerder in deze module. De oude versie die je voordien had zal gewoon worden vervangen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R en RStudio installeren</span>"
    ]
  },
  {
    "objectID": "04-Instructies-geven-in-R.html",
    "href": "04-Instructies-geven-in-R.html",
    "title": "4  Instructies geven in R",
    "section": "",
    "text": "Tip: Het is een goed idee om zelf RStudio te openen en zoveel mogelijk actief mee te doen!\n\n\nIn dit hoofdstuk leer je hoe RStudio eruit ziet en krijg je een idee van wat je ermee kan doen. Het belangrijkste is dat je voor het eerst zal zien hoe je instructies (ook wel “commando’s” genoemd) kan geven.\nR is een programmeertaal. Dat betekent dat je commando’s zal typen “ergens” in RStudio. Waar ergens?\nAls je RStudio voor het eerst opent, ziet het er ongeveer uit zoals op de afbeelding hieronder. Er zijn enkele deelvensters.\n\n\n\n\n\nAan de linkerkant (in het lichtblauw hieronder) zie je de console. Dit is het hart van R. Het is de plaats waar jouw commando’s geïnterpreteerd worden en waar je het “antwoord” van R of de “output” zal kunnen zien.\n\n\n\n\n\nHet is mogelijk om commando’s te typen in de console. Typ bijvoorbeeld de berekening 5+3 in de console en druk op Enter.\n\n\n\n\n\nJe ziet dat het commando inderdaad wordt uitgevoerd: je krijgt output terug van R. Dit werkt wel, maar regel per regel commando’s typen in de console is echt niet handig. Dat zal je heel snel merken wanneer je iets complexere code moet schrijven.\nEen veel beter alternatief is werken met scripts. Een script open je door te klikken op het witgroene icoontje linksboven (zie hieronder) en vervolgens op “R Script” te klikken. Je kan het ook helemaal bovenaan via het menu File &gt; New File &gt; R Script.\n\n\n\n\n\nEr opent een nieuw deelvenster en de console wordt wat kleiner.\n\n\n\n\n\nZo’n script is een eenvoudig tekstbestand dat in RStudio wordt geopend. Code die je in het script plaatst, kan je nu makkelijk laten uitvoeren door de console. Dit wordt gedemonstreerd in het filmpje. Uitleg in tekstvorm vind je onder het filmpje.\n\n\n\n\n\n\nOm één regel code uit te voeren klik je met je muis in de regel code die je wil uitvoeren. Druk nu tegelijk op de knoppen CTRL en Enter op je toetsenbord (voor Mac: Command en Enter). Op deze manier wordt één regel van je code uitgevoerd.\nWil je meerdere regels code in één keer uitvoeren, selecteer dan alle gewenste regels door te slepen met je muis en klik vervolgens op CTRL en Enter (voor Mac: Command en Enter).\n\n\nVoila!\nWat is nu eigenlijk het voordeel van te werken met een script? De code zelf verdwijnt niet van zodra je ze uitvoert in de console. Daardoor kan je die bv. verschillende keren na elkaar uitvoeren en aanpassen. Het voordeel van zulke scripts is nu misschien nog niet 100% duidelijk, maar geloof me, het is véél handiger dan code rechtstreeks in de console te typen, zeker wanneer de code wat langer en ingewikkelder is.\n\n\n\n\nProficiat!\n\n\nJe kan nu commando’s ingeven in R. De wereld ligt aan je voeten!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Instructies geven in R</span>"
    ]
  },
  {
    "objectID": "05-Data-in-R.html",
    "href": "05-Data-in-R.html",
    "title": "5  Data in R",
    "section": "",
    "text": "5.1 Een eerste object maken\nIn de video wordt getoond hoe je je eerste object in R kan maken. Onder de video vind je de bijhorende uitleg in tekstvorm. Probeer het zeker ook zelf eens uit in RStudio!\nIn R zal je heel vaak met objecten werken. Laten we eerst kijken naar hoe je zulke objecten kan creëren.\nJe kan gewoon een naam verzinnen voor het object dat je wil aanmaken en die naam in R typen. Je zal ook meteen iets “in” je object willen stoppen. Dat kan je doen met het symbool &lt;-. Dit symbool noemen we de toekenningsoperator. Het bestaat uit twee tekens, namelijk &lt; en -.\nJe code ziet er dan bijvoorbeeld als volgt uit:\nmijn_leeftijd &lt;- 19\nTer herinnering: code uitvoeren doe je door tegelijk CTRL en Enter (Windows) of Command en Enter (Mac) in te tikken.\nWanneer je deze code uitvoert, maak je een object genaamd mijn_leeftijd. Dit object bevat nu één waarde, namelijk 19. In RStudio zie je dit object nu ook verschijnen in de lijst rechtsboven.\nJe kan steeds opvragen wat de inhoud van een object is door de naam van het object te typen en deze code uit te voeren:\nmijn_leeftijd\nIn de console zie je verschijnen:\n[1] 19\nGelukt! Ben je al van je stoel gevallen van de mogelijkheden van R? Neen? Ok, dat is begrijpelijk, maar je kan er natuurlijk veel meer mee. In een volgend voorbeeld gaan we een stapje verder: een object met de naam leeftijden aanmaken dat meerdere gegevens bevat. Dit zijn bijvoorbeeld leeftijden van vijf leden van een basketbalteam.\nZo’n reeks van gegevens wordt ook een vector genoemd. Die kan je maken met de functie c(), zoals in dit voorbeeld:\nleeftijden &lt;- c(19, 22, 18, 22, 24)\nDe functie c() zorgt ervoor dat alles wat tussen haakjes staat als één samenhangend object wordt beschouwd door R.\nOok de inhoud van dit object kan je makkelijk terug oproepen.\nleeftijden\n\n[1] 19 22 18 22 24\nHet object leeftijden bevat inderdaad niet één getal, maar een reeks getallen. Deze getallen staan trouwens in een vaste volgorde.\nLet erop dat R hoofdlettergevoelig is. Wanneer je het object leeftijden wil oproepen, mag je het dus niet schrijven met hoofdletter L. Doe je dat toch, dan krijg je een foutmelding object 'Leeftijden' not found. Dat komt omdat het object Leeftijden gewoon niet bestaat.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "05-Data-in-R.html#een-vector-met-namen",
    "href": "05-Data-in-R.html#een-vector-met-namen",
    "title": "5  Data in R",
    "section": "5.2 Een vector met namen",
    "text": "5.2 Een vector met namen\nEen vector kan ook gegevens van het nominale meetniveau bevatten. Hoe je zo’n vector kan maken zie je in het filmpje. Eronder vind je de bijhorende uitleg in tekstvorm.\n\n\n\n\n\n\nDe term “data” of “gegevens” betekent niet automatisch dat het om kwantitatieve gegevens gaat. Het is even goed mogelijk om een vector met gegevens van het nominale meetniveau aan te maken. In het voorbeeld van het basketbalteam zou het bijvoorbeeld om de voornamen van de basketbalspelers kunnen gaan. Het enige verschil met de vector die hun leeftijden bevat, is dat de gegevens nu tussen aanhalingstekens moeten staan.\n\nvoornamen &lt;- c(\"Laura\", \"Danira\", \"Stefanie\", \"Leyla\", \"Chelsy\")\n\n\n\nHet is belangrijk om te beseffen dat de vijf namen een vaste plaats hebben gekregen in de vector (net zoals eerder in de vector leeftijden). Laura staat op de eerste plaats, Danira op de tweede plaats, enzoverder.\nHet is ook mogelijk om de namen afzonderlijk op te roepen. Dat kan door de naam van de vector te combineren met vierkante haakjes [ ], om bijvoorbeeld de derde voornaam uit de vector op te roepen:\n\nvoornamen[3]\n\n[1] \"Stefanie\"\n\n\n\n\nJe hebt dus een selectie gemaakt van enkel het derde element uit de vector. Wat zou volgens jou de output zijn als je het volgende commando zou ingeven?\n\nvoornamen[5]\n\n\n\nKlik hier om het antwoord te zien\n\n\nHet 5e element uit de vector voornamen is “Chelsy”.\n\n\n\n\nEn wat met het volgende commando? Begrijp je welke selectie hier wordt gemaakt? Voer het commando zelf uit in RStudio en vergelijk de output met de vector voornamen.\n\nvoornamen[1:3]\n\n\n\nKlik hier om het antwoord te zien\n\n\nMet dit commando selecteer je de elementen 1 tot en met 3 uit de vector. Hier zijn dat dus “Laura”, “Danira” en “Stefanie”.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "05-Data-in-R.html#rugnummers",
    "href": "05-Data-in-R.html#rugnummers",
    "title": "5  Data in R",
    "section": "5.3 Rugnummers",
    "text": "5.3 Rugnummers\nVerder wil je ook de rugnummers van de speelsters bijhouden. Dat werkt opnieuw zoals voorheen: met de functie c() stop je de rugnummers in een vector.\nEven goed nadenken: wat is het meetniveau van de variabele rugnummers? Rugnummers zijn getallen, dus je zou denken dat dit precies werkt zoals in het voorbeeld met de leeftijden. Maar rugnummers zijn verschillend van leeftijden van mensen. Het zijn variabelen van het nominale meetniveau.\nAls je (verkeerdelijk) de volgende code zou invoeren, dan denkt R dat deze vector gegevens bevat van interval- of rationiveau.\n\nrugnummers_fout &lt;- c(4, 12, 7, 76, 33)\n\n\n\nWaarom is dat nu zo verkeerd? Omdat het lijkt alsof je uit deze vector informatie zou kunnen halen die er eigenlijk niet in zit. Bijvoorbeeld, uit de vector rugnummers_fout zou je het verschil kunnen berekenen tussen rugnummers van verschillende speelsters. Of je zou het gemiddelde rugnummer kunnen berekenen. Die berekeningen hebben echter geen betekenis.\nOm dergelijke verwarring te voorkomen moet je de rugnummers in een vector stoppen zoals je ook de voornamen van de speelsters in een vector hebt opgeslagen: met dubbele aanhalingstekens. Op die manier weet R dat dit een nominale variabele is.\n\nrugnummers &lt;- c(\"4\", \"12\", \"7\", \"76\", \"33\")\n\n\n\nNu zal R niet toelaten dat je bijvoorbeeld het verschil berekent tussen twee rugnummers. Je zal een foutmelding krijgen. En dat is terecht.\n\nrugnummers[4]-rugnummers[2]\n\n\n\nError in rugnummers[4] - rugnummers[2] : \n  non-numeric argument to binary operator",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "05-Data-in-R.html#een-dataframe-creëren",
    "href": "05-Data-in-R.html#een-dataframe-creëren",
    "title": "5  Data in R",
    "section": "5.4 Een dataframe creëren",
    "text": "5.4 Een dataframe creëren\nBekijk de video voor een demonstratie. Onder de video vind je de uitleg in tekstvorm.\n\n\n\n\n\n\nOm deze module af te ronden zullen we de vectoren die we hebben aangemaakt, samenbrengen in een dataframe. Wat is dat nu weer?\nEen dataframe is niet meer dan een verzameling van vectoren van dezelfde lengte, die ook inhoudelijk bij elkaar horen. De vectoren die je eerder al hebt aangemaakt, kunnen als voorbeeld dienen. Voorlopig zijn dat drie losse vectoren. R weet niet dat ze bij elkaar horen.\n\nvoornamen &lt;- c(\"Laura\", \"Danira\", \"Stefanie\", \"Leyla\", \"Chelsy\")\n\nleeftijden &lt;- c(19, 22, 18, 22, 24)\n\nrugnummers &lt;- c(\"4\", \"12\", \"7\", \"76\", \"33\")\n\n\n\nHet dataframe maken doe je met de functie data.frame(). De verschillende vectoren die je in het dataframe wil stoppen zet je simpelweg tussen de haakjes. Je kan het object meteen ook een naam geven.\n\nmijn_team &lt;- data.frame(voornamen, leeftijden, rugnummers)\n\n\n\nDe functie data.frame() is een manier om aan R te zeggen dat de eerste waarde uit de vector voornamen hoort bij de eerste waarde uit de vector leeftijd en bij de eerste waarde uit de vector rugnummers. Hetzelfde geldt voor de tweede, derde,… waarde uit alle drie de vectoren. Natuurlijk is het heel belangrijk dat de volgorde van de data in de drie vectoren correct is: Laura is 19 jaar oud en heeft rugnummer 4, Danira is 22 en heeft rugnummer 12, enzovoort. Als dat niet zo is, dan zal je dataframe niet meer zijn dan een verwarrende hoop gegevens zonder structuur.\n\n\nVergeet niet dat R hoofdlettergevoelig is. Schrijf de naam van de functie data.frame() dus niet als Data.frame(). Anders krijg je een foutmelding:\n\nmijn_team &lt;- Data.frame(voornamen, leeftijden, rugnummers)\n\n\n\nError in Data.frame(voornamen, leeftijden, rugnummers) : \n  could not find function \"Data.frame\"\n\n\n\n\nAan de hand van de zelfgekozen naam mijn_team kan je het object makkelijk weer oproepen:\n\nmijn_team\n\n  voornamen leeftijden rugnummers\n1     Laura         19          4\n2    Danira         22         12\n3  Stefanie         18          7\n4     Leyla         22         76\n5    Chelsy         24         33\n\n\n\n\nHet dataframe is dus een grotere structuur die meerdere vectoren bevat. Met het symbool \\(\\$\\) kan je de afzonderlijke vectoren in het dataframe oproepen. Dat gaat bijvoorbeeld zo:\n\nmijn_team$voornamen\n\n[1] \"Laura\"    \"Danira\"   \"Stefanie\" \"Leyla\"    \"Chelsy\"  \n\n\n\n\nUit deze vector kan je dan weer de individuele elementen selecteren met vierkante haakjes, zoals je eerder al hebt gedaan:\n\nmijn_team$voornamen[4]\n\n[1] \"Leyla\"\n\n\n\n\nMet dat laatste commando zeg je eigenlijk “geef me het vierde element uit de vector voornamen uit het dataframe mijn_team”.\nWat zou het volgende commando opleveren als output? Denk even na en voer het commando dan uit in RStudio.\n\nmijn_team$leeftijden[1]\n\n\n\nKlik hier om het antwoord te zien\n\n\n\n\n[1] 19\n\n\n\n\n\n\nHet dataframe is dus een grotere structuur met verschillende vectoren. Het is een soort rechthoekig “blok”, met rijen en kolommen in een vaste volgorde. Je kan uit dit dataframe ook op de volgende manier onderdelen selecteren:\n\nmijn_team[2,3]\n\n\n\nMet die code selecteer je het element op de tweede rij, uit de derde kolom. Kijk even terug naar het dataframe en zoek op welk element dit is. Voer de code uit. Klopt de output met wat je dacht?\n\n\nKlik hier om het antwoord te zien\n\n\n\n\n[1] \"12\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "05-Data-in-R.html#slot",
    "href": "05-Data-in-R.html#slot",
    "title": "5  Data in R",
    "section": "5.5 Slot",
    "text": "5.5 Slot\nIn deze module heb je als een echte tovenaar nieuwe objecten gecreëerd uit het niets!\nJe hebt die objecten bovendien een inhoud gegeven. Je weet dat die objecten ook vectoren kunnen zijn. Je kan die zelf aanmaken met de functie c().\nTen slotte kan je verschillende vectoren verzamelen in een dataframe met -niet zo verrassend- de functie data.frame().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "06-Eerste-berekeningen-in-R.html",
    "href": "06-Eerste-berekeningen-in-R.html",
    "title": "6  Eerste berekeningen in R",
    "section": "",
    "text": "6.1 Bewerkingen met getallen\nR kan je onder meer gebruiken voor eenvoudige wiskundige bewerkingen. Bekijk de video voor een demonstratie. Onder de video vind je de bijhorende uitleg in tekstvorm.\nR is een programmeertaal. Dat betekent dat het een taal is waarmee je instructies geeft aan je computer.\nNiet alle instructies geven het gewenste resultaat. R kan geen boterhammen voor je smeren of je kot opkuisen, dus het heeft weinig zin om dat te vragen aan R.\nWat kan je dan wel met R? R is een hulpmiddel dat je helpt om onderzoeksvragen te beantwoorden. En dus bevat R allerlei mogelijkheden (echt serieus, héél veel mogelijkheden!) om berekeningen te maken die daarbij helpen.\nEen aantal van de commando’s om zulke berekeningen te maken zal je leren kennen in de loop van je vakken. Voor deze introductie beginnen we bij het begin: eenvoudige wiskundige bewerkingen als optellen en aftrekken, vermenigvuldigen en delen. Er wordt soms gezegd dat R een veredelde rekenmachine is. En inderdaad, je kan R gebruiken als een gewone rekenmachine.\nTip: probeer de commando’s die je op deze pagina tegenkomt ook zelf eens uit in RStudio. Dat is belangrijk om het allemaal wat in de vingers te krijgen.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Eerste berekeningen in R</span>"
    ]
  },
  {
    "objectID": "06-Eerste-berekeningen-in-R.html#bewerkingen-met-getallen",
    "href": "06-Eerste-berekeningen-in-R.html#bewerkingen-met-getallen",
    "title": "6  Eerste berekeningen in R",
    "section": "",
    "text": "6.1.1 Getallen\nJe kan getallen optellen.\n\n4+3\n\n[1] 7\n\n\n\n\nHet maakt voor R trouwens niet uit of je spaties tussen de tekens zet. Om de leesbaarheid van je code te verbeteren is het wel een goed idee om regelmatig spaties te gebruiken.\n\n4 + 3 \n\n[1] 7\n\n\n\n\n\n4           +             3\n\n[1] 7\n\n\n\n\nJe kan een getal van een ander getal aftrekken.\n\n5-2\n\n[1] 3\n\n\n\n\nTwee getallen vermenigvuldigen kan ook. Je gebruikt daarvoor een asterisk *.\n\n6*3\n\n[1] 18\n\n\n\n\nJe voelt het al komen: je kan ook een getal delen door een ander getal. Merk op dat de output “1 komma 5” geschreven wordt met een punt, dus niet “1,5”. Ook als je zelf commando’s schrijft, moet je een punt gebruiken om kommagetallen te typen.\n\n12/8\n\n[1] 1.5\n\n\n\n\nEn ook getallen tot een macht verheffen kan natuurlijk. 2 tot de 5e macht verheffen doe je zo:\n\n2^5\n\n[1] 32\n\n\n\n\nDeze bewerkingen kan je combineren, eventueel ook met haakjes erbij. De gebruikelijke volgorde van bewerkingen is hier van toepassing.\n\n10 / 6 - 7\n\n[1] -5.333333\n\n\n\n\n\n10 / (6 - 7)\n\n[1] -10\n\n\n\n\n\n(11 - 4) * 4 / 2 + (1 / 3)\n\n[1] 14.33333\n\n\n\n\n\n\n6.1.2 Objecten\nAl onder de indruk van de kracht van R? Waarschijnlijk niet. Dat was natuurlijk nog heel basic. Wat kan er verder nog? Het is ook mogelijk om te rekenen met objecten die getallen bevatten, bijvoorbeeld zo:\n\ngetal1 &lt;- 8\ngetal2 &lt;- 10\n\n\n\nHet object getal1 bevat de waarde 8 terwijl object getal2 de waarde 10 bevat. Net als voorheen kan je wiskundige bewerkingen uitvoeren, maar nu door de objectnamen te gebruiken in plaats van de getallen zelf.\n\ngetal1 + getal2\n\n[1] 18\n\n\n\n\n\n(getal2 / getal1) - getal1\n\n[1] -6.75\n\n\n\n\n\n20 - getal1\n\n[1] 12\n\n\n\n\n\n\nThat’s it?\n\nAllemaal goed en wel, maar tot hier toe heb je nog geen duidelijk antwoord op de vraag waarom R handiger is dan een gewone rekenmachine. Zo meteen zal dat duidelijker beginnen worden.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Eerste berekeningen in R</span>"
    ]
  },
  {
    "objectID": "06-Eerste-berekeningen-in-R.html#bewerkingen-met-vectoren",
    "href": "06-Eerste-berekeningen-in-R.html#bewerkingen-met-vectoren",
    "title": "6  Eerste berekeningen in R",
    "section": "6.2 Bewerkingen met vectoren",
    "text": "6.2 Bewerkingen met vectoren\nBekijk het filmpje om te zien hoe je wiskundige bewerkingen kan uitvoeren met vectoren in R. Onder de video vind je de bijhorende uitleg in tekstvorm.\n\n\n\n\n\n\nIn R kan je rekenen met ganse vectoren. Nu zal je pas voor het eerst beginnen merken hoe handig R eigenlijk is.\n\n\n\n6.2.1 Voorbeeld 1\nBijvoorbeeld, je wil de evolutie van het gewicht van baby’s onderzoeken.\nJe weegt baby’s bij de geboorte. Die gegevens (in kilogram) sla je op in een vector:\n\ngewicht_geboorte &lt;- c(3.411, 2.965, 3.215, 3.009, 3.228)\n\n\n\nVervolgens meet je dezelfde baby’s opnieuw, 6 maanden na de geboorte. Ook deze gegevens sla je – in dezelfde volgorde! – op in een vector.\n\ngewicht_6mnd &lt;- c(5.033, 5.011, 5.501, 5.120, 4.963)\n\n\n\nEen logische vraag zou nu kunnen zijn hoeveel elke baby is bijgekomen 6 maanden na de geboorte. Je zou natuurlijk telkens de waarden voor het gewicht van de individuele baby’s kunnen aftrekken:\n\\(5.033 - 3.411\\) voor de eerste baby,\n\\(5.011 - 2.965\\) voor de tweede baby,\nenzovoort voor de andere baby’s.\nDat is natuurlijk heel tijdrovend en je loopt bovendien het risico dat je fouten maakt. Voor een vijftal baby’s valt het nog mee, maar in echt onderzoek zal je vaak veel meer dan 5 metingen uitvoeren.\nIn R hoef je gelukkig niet zoveel werk te doen. In plaats daarvan kan je eenvoudigweg de twee vectoren van elkaar aftrekken. Dit verschil steek je in een nieuw object, bijvoorbeeld met de naam gewicht_evolutie.\n\ngewicht_evolutie &lt;- gewicht_6mnd - gewicht_geboorte\n\n\n\nWanneer je dit nieuwe object oproept, zie je een vector die het verschil in gewicht bevat van elke baby tussen de geboorte en 6 maanden na de geboorte. Veel eenvoudiger, niet?\n\ngewicht_evolutie\n\n[1] 1.622 2.046 2.286 2.111 1.735\n\n\n\n\nR is dan wel een “soort rekenmachine”, dit voorbeeld demonstreert voor het eerst dat R toch een pak meer kan dan de doorsnee rekenmachine op je smartphone.\n\n\n6.2.2 Voorbeeld 2\nLaten we nog een tweede voorbeeld bekijken van een berekening met vectoren: Je kan een vector vermenigvuldigen met een getal. Dit kan bijvoorbeeld handig zijn om de gegevens te veranderen van eenheid. Bijvoorbeeld, je beschikt over gegevens in meter, maar je wil die liever in centimeter.\n\ndata_meter &lt;- c(1.55, 1.79, 1.99, 1.91, 1.65, 1.81, 1.49, 1.74, 1.79)\n\n\n\n\ndata_centimeter &lt;- 100 * data_meter\n\ndata_centimeter\n\n[1] 155 179 199 191 165 181 149 174 179\n\n\n\n\nNatuurlijk kan je ook vectoren optellen, vermenigvuldigen, delen,…",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Eerste berekeningen in R</span>"
    ]
  },
  {
    "objectID": "07-Eenvoudige-functies.html",
    "href": "07-Eenvoudige-functies.html",
    "title": "7  Eenvoudige functies",
    "section": "",
    "text": "7.1 Functies voor vectoren\nIn het kader van een onderzoek heb je 10 mensen bevraagd en gegevens verzameld over hun persoonlijke maandelijkse inkomen (in euro). Je stopt die gegevens in een vector inkomen.\ninkomen &lt;- c(1850, 1722, 2319, 4480, 1398, 849, 1679, 1612, 3938, 2405)\nNu wil je graag het gemiddelde berekenen van die 10 inkomens. Dat kan je natuurlijk doen door alle inkomens op te tellen en te delen door 10:\n(1850 + 1722 + 2319 + 4480 + 1398 + 849 + 1679 + 1612 + 3938 + 2405) / 10\n\n[1] 2225.2\nJe krijgt wel het juiste antwoord, maar zelfs voor 10 inkomens is het al een hele klus om op deze manier te werken. In echt onderzoek zal je vaak nog veel meer dan 10 observaties maken. Voor 100 of 1000 inkomens zal je veel te veel werk hebben als je de berekening van het gemiddelde op de bovenstaande manier aanpakt. Je zal dus een betere methode nodig hebben.\nHiervoor kan je een functie gebruiken. Een functie kan je zien als een verkorte manier om een gewenst resultaat te krijgen. Bijna elke functie heeft een input nodig. De functie doet iets met die input en geeft je een output terug.\nIn dit voorbeeld wens je het gemiddelde te berekenen van een reeks gegevens. R weet niet uit zichzelf van welke gegevens jij het gemiddelde wil weten. Jij moet dat aan R vertellen. Hier zijn de gegevens in de vector inkomen de input. Je geeft die input aan de functie door die tussen de haakjes te plaatsen, zoals hieronder. De vector inkomen is nu een “argument” van de functie mean(). De output is het gemiddelde.\nmean(inkomen)\n\n[1] 2225.2\nOp een heel gelijkaardige manier kan je nog allerlei andere zaken te weten komen over de vector inkomen. Je geeft telkens de vector als argument aan een bepaalde functie.\nDe mediaan berekenen:\nmedian(inkomen)\n\n[1] 1786\nDe som van alle waarden in de vector:\nsum(inkomen)\n\n[1] 22252\nDe grootste waarde uit de vector:\nmax(inkomen)\n\n[1] 4480\nDe kleinste waarde uit de vector:\nmin(inkomen)\n\n[1] 849\nEn het aantal waarden in de vector:\nlength(inkomen)\n\n[1] 10\nJe kan met deze functies ook onmiddellijk berekeningen maken. Voer bijvoorbeeld eens de volgende code uit:\nsum(inkomen) / length(inkomen)\n\n[1] 2225.2\nWat is de output van deze code? Herken je dit getal? Begrijp je wat er is gebeurd?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Eenvoudige functies</span>"
    ]
  },
  {
    "objectID": "07-Eenvoudige-functies.html#functies-voor-vectoren",
    "href": "07-Eenvoudige-functies.html#functies-voor-vectoren",
    "title": "7  Eenvoudige functies",
    "section": "",
    "text": "Klik hier om het antwoord te zien\n\n\nDit getal is het gemiddelde dat je eerder al hebt berekend met de functie mean(). Het is logisch dat dit dezelfde waarde is, want met sum(inkomen) bereken je de som van alle waarden in de vector. Dat totaal deel je vervolgens door de lengte van de vector, met andere woorden door het aantal observaties. Dit zijn gewoon de stappen in het berekenen van het gemiddelde.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Eenvoudige functies</span>"
    ]
  },
  {
    "objectID": "07-Eenvoudige-functies.html#functies-voor-dataframes",
    "href": "07-Eenvoudige-functies.html#functies-voor-dataframes",
    "title": "7  Eenvoudige functies",
    "section": "7.2 Functies voor dataframes",
    "text": "7.2 Functies voor dataframes\nFuncties kunnen ook gebruikt worden om info te halen uit een dataframe in plaats van een vector. Misschien heb je behalve het inkomen ook gevraagd naar hoeveel andere gezinsleden in het gezin leven van de bevraagde personen. Die gegevens zitten in de vector gezinsleden.\n\ninkomen &lt;- c(1850, 1722, 2319, 4480, 1398, 849, 1679, 1612, 3938, 2405)\n\ngezinsleden &lt;- c(2, 3, 0, 1, 1, 0, 2, 2, 1, 0)\n\n\n\nDe vectoren gezinsleden en inkomen kan je samenvoegen tot een dataframe, zoals je eerder al hebt gedaan:\n\nmijn_data &lt;- data.frame(inkomen, gezinsleden)\n\n\n\nDe functie dim() vertelt je hoeveel observaties en hoeveel variabelen er in het dataframe zitten. Nu geef je het dataframe als argument aan de functie:\n\ndim(mijn_data)\n\n[1] 10  2\n\n\n\n\nDe output die je kreeg, leert je dat er 10 observaties zijn van 2 variabelen. Is dat wat je had verwacht?\nEr bestaan nog andere handige functies zoals dim() die dienen om overzicht te geven over je data, zonder er berekeningen mee uit te voeren.\nOm de eerste 6 observaties uit een dataframe te bekijken kan je de functie head() gebruiken.\n\nhead(mijn_data)\n\n  inkomen gezinsleden\n1    1850           2\n2    1722           3\n3    2319           0\n4    4480           1\n5    1398           1\n6     849           0\n\n\n\n\nMisschien wil je enkel de eerste 3 rijen van het dataframe zien, in plaats van de eerste 6 rijen. Dat kan je aanpassen in je commando. Je gebruikt dezelfde functie maar geeft er een extra argument aan.\n\nhead(mijn_data, n=3)\n\n  inkomen gezinsleden\n1    1850           2\n2    1722           3\n3    2319           0\n\n\n\n\nMet het argument n geef je aan hoeveel rijen van het dataframe je wil zien. Standaard zijn het er 6, maar je kan het dus aanpassen. Als je de argumenten in de juiste volgorde zet, mag je het deel n= ook weglaten. Het eerstvolgende stukje code zal dus ook werken, maar het tweede niet:\n\nhead(mijn_data, 3)\n\n  inkomen gezinsleden\n1    1850           2\n2    1722           3\n3    2319           0\n\n\n\n\n\nhead(3, mijn_data)\n\n\n\nError in checkHT(n, dx &lt;- dim(x)) : \n  invalid 'n' - must have length one when dim(x) is NULL, got 2\n\n\n\n\nAls je vragen hebt over een functie en/of de argumenten die je eraan kan geven, dan kan je altijd meer informatie krijgen door de functie te laten voorafgaan door een vraagteken. Je ziet dan rechtsonder in RStudio een pagina verschijnen met uitleg. Daarin staat bijvoorbeeld welke argumenten allemaal aan een functie kunnen worden gegeven.\n\n?head()\n\n\n\nEen interessante functie om overzicht te krijgen over je data is str(). Deze functie geeft je een lijst met alle variabelen die in het dataframe zitten, en meteen zie je erbij om welk type variabele het gaat.\n\nstr(mijn_data)\n\n'data.frame':   10 obs. of  2 variables:\n $ inkomen    : num  1850 1722 2319 4480 1398 ...\n $ gezinsleden: num  2 3 0 1 1 0 2 2 1 0\n\n\n\n\nHet woordje num naast de variabelen inkomen en gezinsleden geeft aan dat het allebei numerieke variabelen zijn.\n\n\nLeren werken met functies is misschien niet altijd makkelijk in het begin, maar het went snel en het kan zelfs leuk zijn. Onthoud vooral dat functies dienen om je leven makkelijker te maken: minder werk, minder code typen, minder kans op fouten,…",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Eenvoudige functies</span>"
    ]
  },
  {
    "objectID": "08-Je-werk-opslaan.html",
    "href": "08-Je-werk-opslaan.html",
    "title": "8  Je werk opslaan",
    "section": "",
    "text": "8.1 Windows",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Je werk opslaan</span>"
    ]
  },
  {
    "objectID": "08-Je-werk-opslaan.html#windows",
    "href": "08-Je-werk-opslaan.html#windows",
    "title": "8  Je werk opslaan",
    "section": "",
    "text": "8.1.1 Een script opslaan\nIn de afbeelding hieronder vind je een script waar je lang aan hebt gezwoegd. Tijd om je voortgang eens op te slaan. Hoe kan je dat doen? Je hebt waarschijnlijk wel al eens een Word-document of een Powerpoint-presentatie gemaakt en opgeslagen. Een script opslaan werkt op dezelfde manier.\n\n\n\n\n\nEen script opslaan doe je met het blauwe icoontje aan de bovenkant van het script. Op de afbeelding hieronder staat het aangeduid met de rode pijl. Een andere mogelijkheid is tegelijk de toetsen CTRL en S indrukken.\n\n\n\n\n\nKies een map op je computer waar je het script wil opslaan. Hier kiezen we voor C:/Gebruikers/michi/Documenten/UGent. Geef je script een herkenbare naam, zoals hier “basketbal.R”. De extensie “.R” wijst erop dat het om een R-script gaat.\n\n\n\n\n\nAls je succesvol hebt opgeslagen, wordt het icoontje bijna onzichtbaar, zoals hieronder. Dat wil zeggen dat al je werk is opgeslagen.\n\n\n\n\n\nAls je nu opnieuw een wijziging aanbrengt in je R-code, dan merk je dat het icoontje opnieuw zichtbaar wordt. Logisch, want er zijn nieuwe wijzigingen in je code die kunnen worden opgeslagen.\n\n\n\n\n\nAls je nu opnieuw opslaat, dan wordt het vorige bestand gewoon overschreven. Wil je je script toch op een andere locatie opslaan, dan kan dat via File &gt; Save as…\n\n\n\n\n\n\n\n8.1.2 Een dataframe opslaan\nBekijk de onderstaande video. Onder de video vind je dezelfde uitleg in tekstvorm.\n\n\n\n\n\n\nBehalve een script kan je ook een dataframe opslaan. Je gebruikt daarvoor de functie write.csv().\nBekijk de onderstaande code. Er worden drie vectoren aangemaakt: voornamen, leeftijden en rugnummers.\n\nvoornamen &lt;- c(\"Laura\", \"Danira\", \"Stefanie\", \"Leyla\", \"Chelsy\")\n\nleeftijden &lt;- c(19, 22, 18, 22, 24)\n\nrugnummers &lt;- c(\"4\", \"12\", \"7\", \"76\", \"33\") \n\n\n\nDeze vectoren worden nu samengebracht in een dataframe genaamd mijn_team:\n\nmijn_team &lt;- data.frame(voornamen, leeftijden, rugnummers) \n\n\n\nJe hebt dus data van drie variabelen samengebracht in één object: mijn_team. Nu wil je dit object in zijn geheel opslaan op je computer. Dat kan met volgende code:\n\nwrite.csv(mijn_team, file = \"mijn_eerste_dataframe.csv\", row.names = FALSE) \n\n\n\nDeze functie maakt een csv-bestand1 aan op je computer. Dat is een type bestand dat perfect geschikt is om onderzoeksgegevens te bevatten.\n\n\nHet eerste argument van de functie write.csv() bepaalt wat er in het csv-bestand moet terechtkomen.\n\nHet tweede argument legt de naam vast van het nieuwe bestand.\n\nHet laatste argument is voorlopig minder belangrijk.\n\n\n\nDe vraag is: waar is dat csv-bestand nu eigenlijk opgeslagen? Als je het later opnieuw nodig hebt, in welke map op je computer moet je dan gaan zoeken?\nDat kan je achterhalen met de functie getwd(). Die functie geeft je de huidige werkmap of working directory. Dat is een map op je computer die gelinkt is met je activiteiten in RStudio. Heel wat functies maken gebruik van die map om\n\n\nofwel zaken op te slaan vanuit RStudio: bijvoorbeeld een dataframe opslaan met de functie write.csv()\n\nofwel omgekeerd, bestanden in te lezen naar RStudio: bijvoorbeeld een dataframe inlezen met de functie read.csv()\n\n\n\nJe huidige werkmap is bijvoorbeeld:\n\ngetwd()\n\n\n\n[1] \"C:/Gebruikers/michi/Documenten\"\n\n\n\n\nDat is misschien niet de map waar je het dataframe wil bewaren2. De vraag die waarschijnlijk op je lippen brandt (of niet, soms?) is: Hoe kan je de working directory aanpassen? Dat bekijken we in het volgende onderdeel.\n\n\n\n\n8.1.3 Een working directory kiezen\nDe functie write.csv() slaat je dataframe op in de huidige working directory. Om te achterhalen welke map op dit moment je working directory is, kan je volgend commando gebruiken:\n\ngetwd() \n\n\n\nJe krijgt dan een locatie op je computer als output, bijvoorbeeld:\n\n\n[1] \"C:/Gebruikers/michi/Documenten\"\n\n\n\n\nRStudio heeft die map automatisch gekozen, maar misschien wil je je dataframe helemaal niet op die plaats opslaan. Dan moet je de working directory veranderen. De makkelijkste manier om dat te doen is door bovenaan te klikken op Session. Ga vervolgens naar Set Working Directory en klik op Choose Directory, zoals je in de afbeelding hieronder kan zien.\n\n\n\n\n\nIn het venster dat verschijnt kies je een bestaande map, of maak je een nieuwe, die vanaf nu als working directory zal dienen.\n\n\n\n\n\nDubbelcheck even of de working directory inderdaad aangepast is:\n\ngetwd()\n\n\n\n[1] \"C:/Gebruikers/michi/Documenten/Statistiek/Werken met R\"\n\n\n\n\nGelukt! Dat is de makkelijkste manier om je working directory te veranderen, maar er is een vervelend nadeel aan verbonden. Als je later opnieuw het script opent in R, dan zal de working directory opnieuw veranderd zijn naar de oude, automatisch gekozen map (in ons geval was dat C:/Gebruikers/michi/Documenten).\nAmbetant! Wat nu? Is daar een goede oplossing voor? Dat leer je in het volgende onderdeel.\n\n\n\n\n8.1.4 De functie setwd() gebruiken\nPro tip: wanneer je een nieuw script start, volg dan altijd eerst de onderstaande 5 stappen.\n\n\n1. Kies een working directory via Session &gt; Set Working Directory &gt; Choose Directory.\n\n\n\n\n\n2. Voer het commando getwd() uit.\n3. In de console verschijnt nu de locatie van je working directory. Selecteer die locatie, rechtsklik erop en kopieer.\n\n\n\n\n\n4. Typ nu helemaal bovenaan in je script setwd()\n5. Plaats tussen de haakjes van de functie setwd() de locatie die je in stap 3 hebt gekopieerd. Vergeet niet om de locatie ook tussen aanhalingstekens te zetten. Sla je script op.\n\n\n\n\n\nHet kan een beetje omslachtig lijken, maar je raakt het snel gewoon om altijd een script te beginnen met de functie setwd().\nHet voordeel aan deze manier van werken is dat je script nu bijna vanzelf gelinkt zal zijn aan de gewenste map op je computer. Het enige wat je moet doen is de regel code\n\nsetwd(\"C:/Users/MijnNaam/Documents/Statistiek/Werken met R\")\n\nuitvoeren wanneer je het script opent om erin verder te werken. Wanneer je nu bijvoorbeeld een dataframe wil opslaan met de functie write.csv() dan zal dit bestand automatisch in de working directory terechtkomen. Er zijn nog heel wat andere functies behalve write.csv() waarvoor dat handig is.\nNog een laatste opmerking: het is meestal een goed idee om je script zelf ook op te slaan in diezelfde map, de working directory. Om het allemaal simpel en overzichtelijk te houden…\n\n\n\n\n8.1.5 Samengevat\nJe werk opslaan in R: Easy peasy, right? Maar mocht het toch een beetje verwarrend zijn, vatten we hier nog eens kort samen.\n\nHoe kan je een script opslaan?\nDit werkt gelijkaardig aan bijvoorbeeld een Word-document opslaan: wanneer je een nieuw script voor de eerste keer opslaat, moet je een map kiezen. Vanaf dan kan je gewoon opslaan met het blauwe diskette-icoontje of met de toetsen CTRL + S. Dit zal altijd op dezelfde locatie gebeuren en het vorige bestand overschrijven. (Wil je je script toch op een andere locatie opslaan, dan kan je onder File kiezen voor Save as …)\n\n\nEen dataframe opslaan met de functie write.csv()\nAls je onderzoeksdata in een dataframe hebt samengebracht, kan het handig zijn om dat object (het dataframe dus) op je computer op te slaan. Dat kan je in je script doen met de functie write.csv(), bijvoorbeeld zo:\n\nwrite.csv(mijn_df, file = \"mijn_eerste_dataframe.csv\", row.names = FALSE)\n\n\n\nJe hebt hier geen locatie (map op je computer) gekozen om het csv-bestand in te creëren. Het bestand wordt automatisch aangemaakt in je working directory (zie hieronder).\n\n\nEen working directory vastleggen met de functie setwd()\nEen working directory of werkmap is een locatie op je computer die gelinkt is met je activiteiten in RStudio. Heel wat functies maken gebruik van die map om\n\n\nofwel zaken op te slaan vanuit RStudio: bijvoorbeeld een dataframe opslaan met de functie write.csv()\n\nofwel omgekeerd, bestanden in te lezen naar RStudio: bijvoorbeeld een dataframe inlezen met de functie read.csv()\n\n\n\nEen working directory vastleggen kan je met de functie setwd(), bijvoorbeeld:\n\nsetwd(\"C:/Users/MijnNaam/Documents/Statistiek/Werken met R\")\n\n\n\nHet is een goede gewoonte om een script altijd te starten met de functie setwd().",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Je werk opslaan</span>"
    ]
  },
  {
    "objectID": "08-Je-werk-opslaan.html#macos",
    "href": "08-Je-werk-opslaan.html#macos",
    "title": "8  Je werk opslaan",
    "section": "8.2 macOS",
    "text": "8.2 macOS\n\n8.2.1 Een script opslaan\nIn de afbeelding hieronder vind je een script waar je lang aan hebt gezwoegd. Tijd om je voortgang eens op te slaan. Hoe kan je dat doen?\n\n\n\n\n\nEen script opslaan doe je met het blauwe icoontje aan de bovenkant van het script. Op de afbeelding hieronder staat het aangeduid met de rode pijl. Het kan ook via File &gt; Save.\n\n\n\n\n\nKies een map op je computer waar je het script wil opslaan. Hier kiezen we bijvoorbeeld voor /Users/jouwnaam/STATISTIEK. Geef je script een herkenbare naam.\n\n\n\n\n\nAls je succesvol hebt opgeslagen, wordt het icoontje bijna onzichtbaar, zoals hieronder. Dat wil zeggen dat al je werk opgeslagen is.\n\n\n\n\n\nAls je nu opnieuw een wijziging aanbrengt in je R-code, dan merk je dat het icoontje opnieuw zichtbaar wordt. Logisch, want er zijn nieuwe wijzigingen in je code die kunnen worden opgeslagen.\n\n\n\n\n\n\n\n8.2.2 Een dataframe opslaan\nBekijk de onderstaande video. Onder de video vind je dezelfde uitleg in tekstvorm.\n\n\n\n\n\n\nBehalve een script kan je ook een dataframe opslaan. Je gebruikt daarvoor de functie write.csv().\nBekijk de onderstaande code. Er worden drie vectoren aangemaakt: voornamen, leeftijden en rugnummers.\n\nvoornamen &lt;- c(\"Laura\", \"Danira\", \"Stefanie\", \"Leyla\", \"Chelsy\")\n\nleeftijden &lt;- c(19, 22, 18, 22, 24)\n\nrugnummers &lt;- c(\"4\", \"12\", \"7\", \"76\", \"33\")\n\n\n\nDeze vectoren worden samengebracht in een dataframe genaamd mijn_team:\n\nmijn_df &lt;- data.frame(voornamen, leeftijden, rugnummers)\n\n\n\nJe hebt dus data van drie variabelen samengebracht in één object: mijn_team. Nu wil je dit object in zijn geheel opslaan op je computer. Dat kan met volgende code:\n\nwrite.csv(mijn_team, file = \"basketbal.csv\", row.names = FALSE)\n\n\n\nDeze functie maakt een csv-bestand3 aan op je computer. Dat is een type bestand dat perfect geschikt is om onderzoeksgegevens te bevatten.\n\n\nHet eerste argument van de functie write.csv() bepaalt wat er in het csv-bestand moet terechtkomen.\n\nHet tweede argument legt de naam vast van het nieuwe bestand.\n\nHet laatste argument is hier minder belangrijk.\n\n\n\nGrote vraag is: waar is dat csv-bestand nu eigenlijk opgeslagen? Als je het later opnieuw nodig hebt, in welke map op je computer moet je dan gaan zoeken?\nDat kan je achterhalen met de functie getwd(). Die functie vertelt je de locatie op je computer waarmee je R-sessie gelinkt is. Die noemen we de werkmap of working directory.\n\ngetwd()\n\n\n\n[1] \"/Users/jouwnaam/Documents\"\n\n\n\n\nDat is misschien niet de locatie waar je het dataframe wilde opslaan4. In dat geval zal je de working directory willen veranderen.\nDe vraag die waarschijnlijk op je lippen brandt (of niet, soms?) is: Hoe kan je die working directory aanpassen? Meer daarover in het volgende onderdeel!\n\n\n\n\n8.2.3 Een working directory kiezen\nOm te achterhalen welke map op dit moment je working directory is, kan je volgend commando gebruiken:\n\ngetwd()\n\n\n\nJe krijgt dan een locatie op je computer als output, bijvoorbeeld:\n\n\n[1] \"/Users/jouwnaam/Documents\"\n\n\n \nRStudio heeft die map automatisch gekozen, maar misschien wil je je huidige script helemaal niet op die plaats opslaan. Dan moet je je working directory veranderen. De makkelijkste manier om dat te doen is door bovenaan te klikken op Session. Ga vervolgens naar Set Working Directory en klik op Choose Directory, zoals je in de afbeelding hieronder kan zien.\n\n\n\n\n\nIn het venster dat nu verschijnt kies je een bestaande map, of maak je een nieuwe, die vanaf nu als working directory zal dienen.\n\n\n\n\n\nDubbelcheck even of de working directory inderdaad aangepast is:\n\ngetwd()\n\n\n\n[1] \"/Users/jouwnaam/Statistiek\"\n\n\n\n\nGelukt!\nDat is de makkelijkste manier om je working directory te veranderen, maar er is een vervelend nadeel aan verbonden. Als je later opnieuw het script opent in R, dan zal de working directory opnieuw veranderd zijn naar de oude, automatisch gekozen map (in ons geval was dat /Users/jouwnaam/Documents).\nAmbetant! Wat nu? Is daar een goede oplossing voor? Dat leer je in het volgende onderdeel.\n\n\n\n\n8.2.4 De functie setwd() gebruiken\nPro tip: wanneer je een nieuw script start, volg dan altijd eerst de onderstaande 5 stappen.\n1. Kies een working directory via Session &gt; Set Working Directory &gt; Choose Directory.\n\n\n\n\n\n2. Voer het commando getwd() uit.\n3. In de console verschijnt nu de locatie van je working directory. Selecteer die locatie, rechtsklik erop en kopieer.\n\n\n\n\n\n4. Typ nu helemaal bovenaan in je script setwd().\n5. Plaats tussen de haakjes van de functie setwd() de locatie die je in stap 3 hebt gekopieerd. Vergeet niet om de locatie ook tussen aanhalingstekens te zetten.\n\n\n\n\n\nHet kan een beetje omslachtig lijken, maar je raakt het snel gewoon om altijd een script te beginnen met de functie setwd().\nHet voordeel aan deze manier van werken is dat je script nu bijna vanzelf gelinkt zal zijn aan de gewenste map op je computer. Het enige wat je moet doen is de code\n\nsetwd(\"/Users/jouwnaam/STATISTIEK\")\n\nuitvoeren wanneer je het script opent om erin verder te werken. Wanneer je nu bijvoorbeeld een dataframe wil opslaan met de functie write.csv() dan zal dit bestand automatisch in de working directory terechtkomen. Er zijn nog heel wat functies behalve write.csv() waarvoor dat handig is.\nNog een laatste opmerking: het is meestal een goed idee om je script ook op te slaan in diezelfde map, de working directory. Kwestie van het allemaal simpel en overzichtelijk te houden…\n\n\n\n\n8.2.5 Samengevat\nJe werk opslaan in R: Easy peasy, right? Maar mocht het toch een beetje verwarrend zijn, vatten we hier nog eens kort samen.\n\nHoe kan je een script opslaan?\nDit werkt gelijkaardig aan bijvoorbeeld een Word-document opslaan: wanneer je een nieuw script voor de eerste keer opslaat, moet je een map kiezen. Vanaf dan kan je gewoon opslaan met het blauwe diskette-icoontje of via File &gt; Save. Dit zal altijd op dezelfde locatie gebeuren en het vorige bestand overschrijven. (Wil je je script toch op een andere locatie opslaan, dan kan je onder File kiezen voor Save as …)\n\n\nEen dataframe opslaan met de functie write.csv()\nAls je je onderzoeksdata in een dataframe hebt samengebracht, kan het handig zijn om dat object (het dataframe dus) op je computer op te slaan. Dat kan je in je script doen met de functie write.csv(), bijvoorbeeld zo:\n\nwrite.csv(mijn_df, file = \"mijn_eerste_dataframe.csv\", row.names = FALSE)\n\n\n\nJe hebt hier geen locatie (map op je computer) gekozen om het csv-bestand in te creëren. Het bestand wordt automatisch aangemaakt in je working directory (zie hieronder).\n\n\nEen working directory vastleggen met de functie setwd()\nEen working directory of werkmap is een locatie op je computer die gelinkt is met je activiteiten in RStudio. Heel wat functies maken gebruik van die map om\n\n\nofwel zaken op te slaan vanuit RStudio: bijvoorbeeld een dataframe opslaan met de functie write.csv()\n\nofwel omgekeerd, bestanden in te lezen naar RStudio: bijvoorbeeld een dataframe inlezen met de functie read.csv()\n\n\n\nEen working directory vastleggen kan je met de functie setwd(), bijvoorbeeld:\n\nsetwd(\"/Users/jouwnaam/Statistiek\")\n\n\n\nHet is een goede gewoonte om een script altijd te starten met de functie setwd().",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Je werk opslaan</span>"
    ]
  },
  {
    "objectID": "08-Je-werk-opslaan.html#footnotes",
    "href": "08-Je-werk-opslaan.html#footnotes",
    "title": "8  Je werk opslaan",
    "section": "",
    "text": "‘csv’ staat voor ‘comma-separated value’.↩︎\nHet is trouwens ook niet noodzakelijk dezelfde locatie als waar je eerder het script hebt opgeslagen, namelijk C:/Gebruikers/michi/Documenten/UGent↩︎\n‘csv’ staat voor ‘comma-separated value’.↩︎\nHet is trouwens ook niet noodzakelijk dezelfde locatie als waar je eerder het script hebt opgeslagen, namelijk /Users/jouwnaam/STATISTIEK↩︎",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Je werk opslaan</span>"
    ]
  },
  {
    "objectID": "09-Data-importeren.html",
    "href": "09-Data-importeren.html",
    "title": "9  Data importeren",
    "section": "",
    "text": "9.1 Windows",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data importeren</span>"
    ]
  },
  {
    "objectID": "09-Data-importeren.html#windows",
    "href": "09-Data-importeren.html#windows",
    "title": "9  Data importeren",
    "section": "",
    "text": "9.1.1 Lokale data inladen\nIn deze situatie heb je een csv-bestand ergens op je computer opgeslagen. In een ideale wereld bevindt dit bestand zich in je working directory.\nTer herinnering, de working directory is een locatie op je computer die in verbinding staat met RStudio. Om te achterhalen wat op dit moment je working directory is gebruik je de functie getwd().\n\ngetwd()\n\n\n\n[1] \"C:/Gebruikers/michi/Documenten/Statistiek/Werken met R\"\n\n\n\n\nAls zich in die map een csv-bestand bevindt, dan kan je het oproepen door simpelweg de naam van het bestand als argument te geven aan de functie read.csv(). Het is vaak een goed idee om dit bestand bij het inlezen meteen in een nieuw object te stoppen, hier basketbal_dataframe genaamd.\n\nbasketbal_dataframe &lt;- read.csv(\"basketbal.csv\")\n\n\n\nInspecteer de eerste 6 rijen van het object dat je net hebt gemaakt.\n\nhead(basketbal_dataframe)\n\n  voornamen leeftijden rugnummers\n1     Laura         19          4\n2    Danira         22         12\n3  Stefanie         18          7\n4     Leyla         22         76\n5    Chelsy         24         33\n\n\n\n\nAls het bestand dat je wil inlezen zich niet in je working directory bevindt, maar ergens anders op je computer, dan moet je de locatie1 meegeven als argument aan de functie read.csv(). Bijvoorbeeld:\n\ndeelnemers_dataframe &lt;- read.csv(\"C:/Users/mbeelaer/Documents/UGent/biostats.csv\")\n\n\n\nBekijk opnieuw de eerste 6 rijen ter controle.\n\nhead(deelnemers_dataframe) \n\n  Name      Sex Age Height..in. Weight..lbs.\n1 Alex        M  41          74          170\n2 Bert        M  42          68          166\n3 Carl        M  32          70          155\n4 Dave        M  39          72          167\n5 Elly        F  30          66          124\n6 Fran        F  33          66          115\n\n\n\n\nDit werkt ook prima, maar het is wat omslachtiger, omdat je eerst de locatie van het bestand moet achterhalen en vervolgens tussen de haakjes van de functie read.csv() plakken.\n\n\n\n\n9.1.2 Data van het internet inladen\nIemand heeft een csv-bestand gemaakt over de films waarin Robert De Niro meespeelt en heeft die data ter beschikking gesteld op het internet. Het bestand is te vinden op het volgende internetadres (ook “url” genoemd):\nhttps://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv\n\n\nDe data in dit bestand kan je rechtstreeks in RStudio inladen. Dit doe je door de url als argument aan de functie read.csv() te geven:\n\nfilm_data &lt;- read.csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv\") \n\n\n\nOm de data te inspecteren kan je de functies head() en str() gebruiken.\n\nhead(film_data)\n\n  Year Score                 Title\n1 1968    86             Greetings\n2 1970    17           Bloody Mama\n3 1970    73              Hi, Mom!\n4 1971    40           Born to Win\n5 1973    98          Mean Streets\n6 1973    88  Bang the Drum Slowly\n\nstr(film_data)\n\n'data.frame':   87 obs. of  3 variables:\n $ Year : int  1968 1970 1970 1971 1973 1973 1974 1976 1976 1977 ...\n $ Score: int  86 17 73 40 98 88 97 41 99 47 ...\n $ Title: chr  \" Greetings\" \" Bloody Mama\" \" Hi, Mom!\" \" Born to Win\" ...\n\n\n\n\nDe data lijken goed ingeladen! Kan je achterhalen hoeveel films in de dataset zijn opgenomen?\n\n\nKlik hier om het antwoord te zien\n\n\nEr zijn 87 “observations” van 3 variabelen in het dataframe. Dat wil zeggen dat jaartal, score en titel van 87 films werden bijgehouden.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data importeren</span>"
    ]
  },
  {
    "objectID": "09-Data-importeren.html#macos",
    "href": "09-Data-importeren.html#macos",
    "title": "9  Data importeren",
    "section": "9.2 macOS",
    "text": "9.2 macOS\n\n9.2.1 Lokale data inladen\nIn deze situatie heb je een csv-bestand ergens op je computer opgeslagen. In het eenvoudigste geval bevindt dit bestand zich in je working directory.\nTer herinnering, de working directory is een locatie op je computer die in verbinding staat met RStudio. Om te achterhalen wat op dit moment je working directory is gebruik je de functie getwd().\n\ngetwd()\n\n\n\n[1] \"/Users/jouwnaam/Statistiek\"\n\n\n\n\nAls zich in die map een csv-bestand bevindt, dan kan je het oproepen door simpelweg de naam van het bestand als argument te geven aan de functie read.csv(). Het is vaak een goed idee om dit bestand bij het inlezen meteen in een nieuw object te stoppen, hier basketbal_dataframe genaamd.\n\nbasketbal_dataframe &lt;- read.csv(\"basketbal.csv\")\n\n\n\nInspecteer de eerste 6 rijen van het dataframe met de functie head().\n\nhead(basketbal_dataframe)\n\n  voornamen leeftijden rugnummers\n1     Laura         19          4\n2    Danira         22         12\n3  Stefanie         18          7\n4     Leyla         22         76\n5    Chelsy         24         33\n\n\n\n\nAls het bestand dat je wil inlezen zich niet in je working directory bevindt, dan moet je de locatie2 meegeven als argument aan de functie read.csv(). Bijvoorbeeld:\n\ndeelnemers_dataframe &lt;- read.csv(\"/Users/jouwnaam/Documents/biostats.csv\")\n\n\n\nBekijk opnieuw de eerste 6 rijen ter controle.\n\nhead(deelnemers_dataframe)\n\n  Name      Sex Age Height..in. Weight..lbs.\n1 Alex        M  41          74          170\n2 Bert        M  42          68          166\n3 Carl        M  32          70          155\n4 Dave        M  39          72          167\n5 Elly        F  30          66          124\n6 Fran        F  33          66          115\n\n\n\n\nDit werkt ook prima, maar het is wat omslachtiger, omdat je eerst de locatie van het bestand moet achterhalen en vervolgens tussen de haakjes van de functie read.csv() plakken.\n\n\n\n\n9.2.2 Data van het internet inladen\nIemand heeft een csv-bestand gemaakt over de films waarin Robert De Niro meespeelt en heeft die data ter beschikking gesteld op het internet. Het bestand is te vinden op het volgende internetadres (ook “url” genoemd):\nhttps://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv\n\n\nDeze data kan je rechtstreeks in RStudio inladen. Dit doe je door de url als argument aan de functie read.csv() te geven. Het is best om dit bestand meteen in een object te stoppen, hier film_data genoemd:\n\nfilm_data &lt;- read.csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/deniro.csv\") \n\n\n\nOm de data te inspecteren kan je de functies head() en str() gebruiken.\n\nhead(film_data)\n\n  Year Score                 Title\n1 1968    86             Greetings\n2 1970    17           Bloody Mama\n3 1970    73              Hi, Mom!\n4 1971    40           Born to Win\n5 1973    98          Mean Streets\n6 1973    88  Bang the Drum Slowly\n\nstr(film_data)\n\n'data.frame':   87 obs. of  3 variables:\n $ Year : int  1968 1970 1970 1971 1973 1973 1974 1976 1976 1977 ...\n $ Score: int  86 17 73 40 98 88 97 41 99 47 ...\n $ Title: chr  \" Greetings\" \" Bloody Mama\" \" Hi, Mom!\" \" Born to Win\" ...\n\n\n\n\nDe data lijken goed ingeladen! Kan je achterhalen hoeveel films in de dataset zijn opgenomen?\n\n\nKlik hier om het antwoord te zien\n\n\nEr zijn 87 “observations” van 3 variabelen in het dataframe. Dat wil zeggen dat jaartal, score en titel van 87 films werden bijgehouden.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data importeren</span>"
    ]
  },
  {
    "objectID": "09-Data-importeren.html#footnotes",
    "href": "09-Data-importeren.html#footnotes",
    "title": "9  Data importeren",
    "section": "",
    "text": "Zorg ervoor dat je enkel / gebruikt in de maplocatie, geen \\.↩︎\nZorg ervoor dat je enkel / gebruikt in de maplocatie, geen \\.↩︎",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data importeren</span>"
    ]
  },
  {
    "objectID": "10-Meer-functies-via-packages.html",
    "href": "10-Meer-functies-via-packages.html",
    "title": "10  Meer functies via “packages”",
    "section": "",
    "text": "Wanneer je R voor het eerst installeert, dan krijg je een basispakket dat toepasselijk “base R” heet. In dat basispakket worden al heel wat functies meegeleverd. Met die functies kan je allerlei taken laten uitvoeren met een minimum aan code.\nZo bevat “base R” een functie om het gemiddelde te berekenen van een reeks getallen. De vector sport bevat het aantal uur dat een groep leerlingen per week aan sport besteedt. De functie mean() geeft je heel snel het gemiddelde aantal uur voor die klas.\n\nsport &lt;- c(6, 0, 7, 8, 3, 0, 3, 3, 7, 2, 6, 5, 3, 4, 7, 3, 7, 3, 6, 0)\n\nmean(sport)\n\n[1] 4.15\n\n\n\n\nEén van de mooie aspecten van R is dat iedereen nieuwe functies kan maken en die beschikbaar kan stellen voor alle gebruikers wereldwijd. Die extra functies worden gebundeld in zogenaamde packages. Op die manier zijn er duizenden uitbreidingen ontstaan van het basispakket van R. Zo heeft iemand allerlei functies gemaakt die helpen bij het visueel voorstellen van data. Die functies zijn gebundeld in een package genaamd ggplot2.\n\n\nAls je functies uit packages wil gebruiken, moet je die eerst installeren en vervolgens laden.\n\n\nEerst het installeren. Dat is ongelooflijk eenvoudig. Voor bijvoorbeeld het package lavaan, typ je gewoon de onderstaande code in R.\n\ninstall.packages(\"lavaan\")\n\n\n\nHet package wordt nu automatisch gedownload en geïnstalleerd. Let erop dat je de naam van het package tussen aanhalingstekens plaatst. Het installeren van een package hoef je maar één keer te doen.\n\n\n\nOm de functies uit het package te gebruiken in je code, moet je het laden met de functie library(). Hierbij is het goed mogelijk dat er één of meer ‘warnings’ verschijnen in de console. Dat is meestal geen enkel probleem. Een ‘warning’ geeft gewoon informatie die je als gebruiker misschien zal interesseren. Het betekent niet meteen dat er iets fout is gegaan. Dat is anders dan een ‘error’. Als je dat ziet staan is er wel een probleem en zal het package niet naar behoren werken.\n\nlibrary(lavaan)\n\n\n\nHet laden van een package moet je wél elke keer doen dat je RStudio start (in tegenstelling tot het installeren). Daarom is het een goed idee om een script altijd te starten met het laden van de packages die je van plan bent te gebruiken. Wil je bijvoorbeeld de packages lavaan en ggplot2 gebruiken, plaats dan bovenaan in je script de code:\n\nlibrary(lavaan)\nlibrary(ggplot2)\n\n\n\nVoer deze twee regels code uit elke keer dat je het script opent. Zo beschik je meteen over alle functies uit die packages.\n\n\n\n\n\nTwee functies om te onthouden\n\n\nOm nieuwe packages te kunnen gebruiken moet je maar twee functies onthouden:\ninstall.packages() moet je éénmalig uitvoeren.\nlibrary() moet je uitvoeren elke keer wanneer je de functies uit een package wil gebruiken.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Meer functies via \"packages\"</span>"
    ]
  }
]